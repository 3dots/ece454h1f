ECE454H1F - Lab5

by: 	Viktor Riabtsev
	997544420


Before touching parallelization, I did the following:

Got rid of the modulus operations, and replaced them with if statements that depend on whether i or j are on the edges of the square lattice. Got a 3x speedup.

Switched inner loop order to make use of cache better. (consecutive i's and not consecutive j's which jump us by LDA) Got 30% speedup from previous version.


The parallalization involed creating 4 threads in life.c game_of_life(), and using an intermidiate function to call a parallelized version of sequential_game_of_life() -> sequential_game_of_life_parallel() in lifeseq.c with different sector inputs.

The idea was to split the square data block into four blocks, lets each thread work over each own blocks (a passed int sector decided what the start and end indecies for the working loop are). Ask for a mutex. Modfiy and external status integer by ORing in a bit depending on which sector (0, 1, 2, 3) finished. Then go to sleep by use of the pthread_cond_wait() function. The last thread to finish it's block would reset the status integer and signal a wake up (each thread subsequently unlocks the mutex associated with the condition variable and the status integer, so that all threads may be active)

The mutex and condition variables are initialized in the game_of_life(), and passed during thread creation by passing a pointer to a structure with the needed paramters (rows, columns etc).

After all the work is done, the sector 0 thread returns the relevant board * into a void* in game_of_life(), which then returns it.


I was actually doing my timing tests through putty ssh connection to an ug machine, and was greatly disssapointed to see my overall time increase dramatically. What I didn't know at the time was that the ssh connection doesn't seem to let me utilize threads well. 

When tested in the lab though, the parallization got me up to overall 8.1 increase, as desired.

Sidenote: the checks that the input number of rows and columns are equal, less than 10,000, and are a power of two happen along other checks in load_dimensions() in load.c .
